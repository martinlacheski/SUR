from django.core.management.base import BaseCommand, CommandError
from apps.trabajos.models import Trabajos
import datetime
import random
import telegram
from apscheduler.schedulers.background import BlockingScheduler
from django.conf import settings
from django.core.exceptions import ObjectDoesNotExist
from django.core.management.base import BaseCommand, CommandError
from apps.bot_telegram.logicaBot import porcentajeTrabajo, notificarSistema
from apps.bot_telegram.models import seguimientoTrabajos
from apps.parametros.models import EstadoParametros
from apps.trabajos.models import Trabajos, DetalleServiciosTrabajo
from telegram import InlineKeyboardButton, InlineKeyboardMarkup
from django.db.models import Count
from apps.usuarios.models import Usuarios
from apps.bot_telegram.logicaBot import porcentajeTrabajo
import time

class Command(BaseCommand):
    def handle(self, *args, **options):
        i = 0
        bot = telegram.Bot(token='1974533179:AAFilVMl-Sw4On5h3OTwm4czRULAKMfBWGM')
        trabajo = Trabajos.objects.get(pk=39)
        trabajo.usuarioAsignado = Usuarios.objects.get(pk=1)
        trabajo.save()
        # Se envia 3 veces el aviso
        while i < 3:
            bot.send_message(chat_id=1241934509, text=mensaje(trabajo))
            faltan_repuestos = {}
            postergar = {}
            keyboard = [
                [InlineKeyboardButton("ðŸ›  Faltan repuestos", callback_data=str(faltan_repuestos))],
                [InlineKeyboardButton("ðŸ•™ Postergar", callback_data=str(postergar))],
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            bot.send_message(chat_id=1241934509,
                             text="ElegÃ­ una opciÃ³n: \n",
                             reply_markup=reply_markup)
            i += 1
            time.sleep(3)

        time.sleep(2)
        # re-asigna el trabajo
        trabajo.usuarioAsignado = Usuarios.objects.get(pk=5)
        trabajo.save()

        # Notifica a usuario que perdiÃ³ el trabajo
        bot.send_message(chat_id=1241934509,
                         text="ðŸ”´ Por falta de respuesta he reasignado tu trabajo NroÂ° " + str(trabajo.id) +\
                                                                 ". El mismo ya no serÃ¡ tu responsabilidad.")

        # Notifica al usuario que "ganÃ³" el trabajo.
        bot.send_message(chat_id=630659758,
                         text="âš  AVISO âš  \nTe he asignado el trabajo  NroÂ° " + str(trabajo.id) +\
                              ". El mismo ya no serÃ¡ tu responsabilidad.")
        # Notifica por sistema
        titulo = "Cambio de asignaciÃ³n de Trabajo"
        descripcion = "El trabajo NroÂ° " + str(trabajo.id) + " originalmente responsabilidad del usuario martin, fuÃ©" \
                                                       " re-asignado al usuario leo"
        notificarSistema(titulo, descripcion)




def mensaje(t):
    mensaje = "Hola! ðŸ‘‹ Te informo que el trabajo NroÂ°" + str(t.id) + "\n\n" +\
    "Marca: " + str(t.modelo.marca.nombre) + "\n" + "Modelo: " + str(t.modelo.nombre) + "\n\n" +\
    "No estÃ¡ finalizado segÃºn la prioridad establecida.\n"
    return mensaje